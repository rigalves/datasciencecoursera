f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
split(x, list(f1, f2))
str(split(x, list(f1, f2)))
str(split(x, list(f1, f2), drop = T))
###########################
printmessage <- function(x) {
if(x > 0)
print("1")
else
print("2")
invisible(x)
}
x <- printmessage(3)
printmessage(NA)
x <- list(a = 1:5, b = rnorm(10)); x
x <- list(a = 1:5, b = rnorm(10)); x
lapply(x, mean)
x <- list(a = 1:5, b = rnorm(10));
lapply(x, mean)
x <- 1:4
lapply(x, runif)
x <- 1:4
class(lapply(x, runif))
x <- 1:4
lapply(x, runif)
runif(1:4)
runif(1:4)
runif(1)
runif(1:4)
runif(2)
runif(3)
runif(4)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[,1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100))
lapply(x, mean)
sapply(x, mean)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
x
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
mapply(rep, 1:4, 4: 1)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
tapply(x, f, mean)
s <- split(airquality, airquality$Month)
s
s <- split(airquality, airquality$Month)
s
fnx <- function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")])
fnx2 <- function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = T)
lapply(s, fnx)
x <- rnorm(10)
x
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
x <- rnorm(10)
x
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
split(x, list(f1, f2))
library(datasets)
data(iris)
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
iris
s <- split(iris, iris$Species); s
s <- lapply(s, mean)
s <- s(s, mean)
s <- split(iris, iris$Species);
s <- s(s, mean)
s <- split(iris, iris$Species);
sapply(s, mean)
s <- split(iris, iris$Species);
lapply(s, mean)
s <- split(iris, iris$Species);
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
?colMeans
s <- split(iris, iris$Species);
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
colMeans(iris)
s <- split(iris, iris$Species);
lapply(s, function(x) mean(x[, "Sepal.Length"]))
s <- split(iris, iris$Species);s
lapply(s, function(x) mean(x[, "Sepal.Length"]))
library(datasets)
data(iris)
s <- split(iris, iris$Species);s
lapply(s, function(x) mean(x[, "Sepal.Length"]))
round(6.588)
lapply(s, function(x) mean(x[, "Sepal.Length"]))["virginica"]
sapply(s, function(x) mean(x[, "Sepal.Length"]))["virginica"]
round(sapply(s, function(x) mean(x[, "Sepal.Length"]))["virginica"])
iris
head(iris)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
head(iris)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
apply(mtcars, 2, mean)
apply(mtcars, 1, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars$mpg
mtcars$cyl
mean(mtcars$mpg, mtcars$cyl)
0
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean) #YES
with(mtcars, tapply(mpg, cyl, mean))
?with
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
mtcars$mpg
mtcars$cyl
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean)) #YES
tapply(mtcars$mpg, mtcars$cyl, mean) #YES
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x[c(1,3)]
x <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(x[1] - x[3])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(x[3] - x[1])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(x[1] - x[3])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
round(abs(x[3] - x[1]))
abs(x[3] - x[1])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
round(abs(x[3] - x[1]))
debug(ls)
ls
debug(ls)
ls()
debug(ls)
ls()
setwd("C:/Users/rigal/Amazon Drive/DBRigo/datasciencecoursera/R")
rm(list = ls())
rankhospital <- function(state, outcome, num = "best") {
# Check that outcome is valid
validOutcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!any(names(validOutcomes) == tolower(outcome))) {
stop("invalid outcome")
return
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
dataForState <- split(data, data$State)[[state]]
## Check that state is valid
if(length(dataForState) == 0) {
stop("invalid state")
return
}
## Converting outcome column to numbers
suppressWarnings(dataForState[,validOutcomes[outcome]] <- as.numeric(dataForState[,validOutcomes[outcome]]))
## Check that num is valid
if(tolower(num) == "best") {
num = 1
} else if(tolower(num) == "worst") {
num = length(na.omit(dataForState[,validOutcomes[outcome]]))
} else if(is.numeric(num)) {
if(num > length(dataForState[,validOutcomes[outcome]])) {
return(NA)
}
} else {
stop("invalid rank")
}
## Return hospital name in that state with the given rank
## 30-day death rate
dataForStateNoNA <- na.omit(dataForState, cols = validOutcomes[outcome])
rankedHospitals <- dataForStateNoNA[order(dataForStateNoNA[,validOutcomes[outcome]], dataForStateNoNA[,2]),c(2,validOutcomes[outcome])]
rankedHospitals[, "Rank"] <- 1: length(rankedHospitals[,1])
rankedHospitals[rankedHospitals[, "Rank"] == num, 1]
}
## Ranking hospitals in all states
rankall <- function(outcome, num = "best") {
# Check that outcome is valid
validOutcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!any(names(validOutcomes) == tolower(outcome))) {
stop("invalid outcome")
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## For each state, find the hospital of the given rank
dataByState = split(data, data$State)
result <- data.frame(hospital = character(), state = character(), stringsAsFactors = F)
for(stateData in dataByState) {
currentState <- stateData[1, "State"]
## Check that num is valid
if(is.numeric(num) && num > length(stateData[,1])) {
result[nrow(result) + 1,] <- c("<NA>", currentState)
} else {
## Converting outcome column to numbers
suppressWarnings(stateData[,validOutcomes[outcome]] <- as.numeric(stateData[,validOutcomes[outcome]]))
## Calculate the rank for the current state
tnum <- num
stateDataNoNA <- na.omit(stateData, cols = validOutcomes[outcome])
if(tolower(tnum) == "best") {
tnum = 1
} else if(tolower(tnum) == "worst") {
tnum = length(stateDataNoNA[,validOutcomes[outcome]])
}
print(stateDataNoNA)
rankedHospitals <- stateDataNoNA[order(stateDataNoNA[,validOutcomes[outcome]], stateDataNoNA[,2]),c(2,validOutcomes[outcome])]
rankedHospitals[, "Rank"] <- 1: length(rankedHospitals[,1])
result[nrow(result) + 1,] <- c(rankedHospitals[rankedHospitals[, "Rank"] == tnum, 1], currentState)
}
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
result
}
head(rankall("heart attack", 20), 20)
## Ranking hospitals in all states
rankall <- function(outcome, num = "best") {
# Check that outcome is valid
validOutcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!any(names(validOutcomes) == tolower(outcome))) {
stop("invalid outcome")
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## For each state, find the hospital of the given rank
dataByState = split(data, data$State)
result <- data.frame(hospital = character(), state = character(), stringsAsFactors = F)
for(stateData in dataByState) {
currentState <- stateData[1, "State"]
## Check that num is valid
if(is.numeric(num) && num > length(stateData[,1])) {
result[nrow(result) + 1,] <- c("<NA>", currentState)
} else {
## Converting outcome column to numbers
suppressWarnings(stateData[,validOutcomes[outcome]] <- as.numeric(stateData[,validOutcomes[outcome]]))
## Calculate the rank for the current state
tnum <- num
stateDataNoNA <- na.omit(stateData, cols = validOutcomes[outcome])
if(tolower(tnum) == "best") {
tnum = 1
} else if(tolower(tnum) == "worst") {
tnum = length(stateDataNoNA[,validOutcomes[outcome]])
}
print(stateDataNoNA)
rankedHospitals <- stateDataNoNA[order(stateDataNoNA[,validOutcomes[outcome]], stateDataNoNA[,2]),c(2,validOutcomes[outcome])]
rankedHospitals[, "Rank"] <- 1: length(rankedHospitals[,1])
result[nrow(result) + 1,] <- c(rankedHospitals[rankedHospitals[, "Rank"] == tnum, 1], currentState)
}
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
result
}
head(rankall("heart attack", 20), 20)
## Ranking hospitals in all states
rankall <- function(outcome, num = "best") {
# Check that outcome is valid
validOutcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!any(names(validOutcomes) == tolower(outcome))) {
stop("invalid outcome")
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## For each state, find the hospital of the given rank
dataByState = split(data, data$State)
result <- data.frame(hospital = character(), state = character(), stringsAsFactors = F)
for(stateData in dataByState) {
currentState <- stateData[1, "State"]
## Check that num is valid
if(is.numeric(num) && num > length(stateData[,1])) {
result[nrow(result) + 1,] <- c("<NA>", currentState)
} else {
## Converting outcome column to numbers
suppressWarnings(stateData[,validOutcomes[outcome]] <- as.numeric(stateData[,validOutcomes[outcome]]))
## Calculate the rank for the current state
tnum <- num
stateDataNoNA <- na.omit(stateData, cols = validOutcomes[outcome])
if(tolower(tnum) == "best") {
tnum = 1
} else if(tolower(tnum) == "worst") {
tnum = length(stateDataNoNA[,validOutcomes[outcome]])
}
rankedHospitals <- stateDataNoNA[order(stateDataNoNA[,validOutcomes[outcome]], stateDataNoNA[,2]),c(2,validOutcomes[outcome])]
rankedHospitals[, "Rank"] <- 1: length(rankedHospitals[,1])
result[nrow(result) + 1,] <- c(rankedHospitals[rankedHospitals[, "Rank"] == tnum, 1], currentState)
}
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
result
}
head(rankall("heart attack", 20), 20)
rankhospital <- function(state, outcome, num = "best") {
# Check that outcome is valid
validOutcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!any(names(validOutcomes) == tolower(outcome))) {
stop("invalid outcome")
return
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
dataForState <- split(data, data$State)[[state]]
## Check that state is valid
if(length(dataForState) == 0) {
stop("invalid state")
return
}
## Converting outcome column to numbers
suppressWarnings(dataForState[,validOutcomes[outcome]] <- as.numeric(dataForState[,validOutcomes[outcome]]))
## Check that num is valid
if(tolower(num) == "best") {
num = 1
} else if(tolower(num) == "worst") {
num = length(na.omit(dataForState[,validOutcomes[outcome]]))
} else if(is.numeric(num)) {
if(num > length(dataForState[,validOutcomes[outcome]])) {
return(NA)
}
} else {
stop("invalid rank")
}
## Return hospital name in that state with the given rank
## 30-day death rate
dataForStateNoNA <- na.omit(dataForState, cols = validOutcomes[outcome])
rankedHospitals <- dataForStateNoNA[order(dataForStateNoNA[,validOutcomes[outcome]], dataForStateNoNA[,2]),c(2,validOutcomes[outcome])]
rankedHospitals[, "Rank"] <- 1: length(rankedHospitals[,1])
rankedHospitals[rankedHospitals[, "Rank"] == num, 1]
}
## Ranking hospitals in all states
rankall <- function(outcome, num = "best") {
# Check that outcome is valid
validOutcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!any(names(validOutcomes) == tolower(outcome))) {
stop("invalid outcome")
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## For each state, find the hospital of the given rank
dataByState = split(data, data$State)
result <- data.frame(hospital = character(), state = character(), stringsAsFactors = F)
for(stateData in dataByState) {
currentState <- stateData[1, "State"]
## Check that num is valid
if(is.numeric(num) && num > length(stateData[,1])) {
result[nrow(result) + 1,] <- c("<NA>", currentState)
} else {
## Converting outcome column to numbers
suppressWarnings(stateData[,validOutcomes[outcome]] <- as.numeric(stateData[,validOutcomes[outcome]]))
## Calculate the rank for the current state
tnum <- num
stateDataNoNA <- na.omit(stateData, cols = validOutcomes[outcome])
if(tolower(tnum) == "best") {
tnum = 1
} else if(tolower(tnum) == "worst") {
tnum = length(stateDataNoNA[,validOutcomes[outcome]])
}
rankedHospitals <- stateDataNoNA[order(stateDataNoNA[,validOutcomes[outcome]], stateDataNoNA[,2]),c(2,validOutcomes[outcome])]
rankedHospitals[, "Rank"] <- 1: length(rankedHospitals[,1])
result[nrow(result) + 1,] <- c(rankedHospitals[rankedHospitals[, "Rank"] == tnum, 1], currentState)
}
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
result
}
head(rankall("heart attack", 20), 20)
source("rankall.R")
head(rankall("heart attack", 20), 10)
# hospital state
# AK <NA> AK
# AL D W MCMILLAN MEMORIAL HOSPITAL AL
# AR ARKANSAS METHODIST MEDICAL CENTER AR
# 4
# AZ JOHN C LINCOLN DEER VALLEY HOSPITAL AZ
# CA SHERMAN OAKS HOSPITAL CA
# CO SKY RIDGE MEDICAL CENTER CO
# CT MIDSTATE MEDICAL CENTER CT
# DC <NA> DC
# DE <NA> DE
# FL SOUTH FLORIDA BAPTIST HOSPITAL FL
tail(rankall("pneumonia", "worst"), 3)
# hospital state
# WI MAYO CLINIC HEALTH SYSTEM - NORTHLAND, INC WI
# WV PLATEAU MEDICAL CENTER WV
# WY NORTH BIG HORN HOSPITAL DISTRICT WY
tail(rankall("heart failure"), 10)
# hospital state
# TN WELLMONT HAWKINS COUNTY MEMORIAL HOSPITAL TN
# TX FORT DUNCAN MEDICAL CENTER TX
# UT VA SALT LAKE CITY HEALTHCARE - GEORGE E. WAHLEN VA MEDICAL CENTER UT
# VA SENTARA POTOMAC HOSPITAL VA
# VI GOV JUAN F LUIS HOSPITAL & MEDICAL CTR VI
# VT SPRINGFIELD HOSPITAL VT
# WA HARBORVIEW MEDICAL CENTER WA
# WI AURORA ST LUKES MEDICAL CENTER WI
# WV FAIRMONT GENERAL HOSPITAL WV
# WY CHEYENNE VA MEDICAL CENTER WY
source("rankall.R")
head(rankall("heart attack", 20), 10)
# hospital state
# AK <NA> AK
# AL D W MCMILLAN MEMORIAL HOSPITAL AL
# AR ARKANSAS METHODIST MEDICAL CENTER AR
# AZ JOHN C LINCOLN DEER VALLEY HOSPITAL AZ
# CA SHERMAN OAKS HOSPITAL CA
# CO SKY RIDGE MEDICAL CENTER CO
# CT MIDSTATE MEDICAL CENTER CT
# DC <NA> DC
# DE <NA> DE
# FL SOUTH FLORIDA BAPTIST HOSPITAL FL
tail(rankall("pneumonia", "worst"), 3)
# hospital state
# WI MAYO CLINIC HEALTH SYSTEM - NORTHLAND, INC WI
# WV PLATEAU MEDICAL CENTER WV
# WY NORTH BIG HORN HOSPITAL DISTRICT WY
tail(rankall("heart failure"), 10)
# hospital state
# TN WELLMONT HAWKINS COUNTY MEMORIAL HOSPITAL TN
# TX FORT DUNCAN MEDICAL CENTER TX
# UT VA SALT LAKE CITY HEALTHCARE - GEORGE E. WAHLEN VA MEDICAL CENTER UT
# VA SENTARA POTOMAC HOSPITAL VA
# VI GOV JUAN F LUIS HOSPITAL & MEDICAL CTR VI
# VT SPRINGFIELD HOSPITAL VT
# WA HARBORVIEW MEDICAL CENTER WA
# WI AURORA ST LUKES MEDICAL CENTER WI
# WV FAIRMONT GENERAL HOSPITAL WV
# WY CHEYENNE VA MEDICAL CENTER WY
## Ranking hospitals in all states
rankall <- function(outcome, num = "best") {
# Check that outcome is valid
validOutcomes <- c("heart attack" = 11, "heart failure" = 17, "pneumonia" = 23)
if (!any(names(validOutcomes) == tolower(outcome))) {
stop("invalid outcome")
}
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## For each state, find the hospital of the given rank
dataByState = split(data, data$State)
result <- data.frame(hospital = character(), state = character(), stringsAsFactors = F)
for(stateData in dataByState) {
currentState <- stateData[1, "State"]
## Check that num is valid
if(is.numeric(num) && num > length(stateData[,1])) {
result[nrow(result) + 1,] <- c("<NA>", currentState)
} else {
## Converting outcome column to numbers
suppressWarnings(stateData[,validOutcomes[outcome]] <- as.numeric(stateData[,validOutcomes[outcome]]))
## Calculate the rank for the current state
tnum <- num
stateDataNoNA <- na.omit(stateData, cols = validOutcomes[outcome])
if(tolower(tnum) == "best") {
tnum = 1
} else if(tolower(tnum) == "worst") {
tnum = length(stateDataNoNA[,validOutcomes[outcome]])
}
rankedHospitals <- stateDataNoNA[order(stateDataNoNA[,validOutcomes[outcome]], stateDataNoNA[,2]),c(2,validOutcomes[outcome])]
rankedHospitals[, "Rank"] <- 1: length(rankedHospitals[,1])
result[nrow(result) + 1,] <- c(rankedHospitals[rankedHospitals[, "Rank"] == tnum, 1], currentState)
}
}
## Return a data frame with the hospital names and the
## (abbreviated) state name
result
}
source("best.R")
source("rankhospital.R")
source("rankall.R")
best("SC", "heart attack")
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
