runif(3)
runif(4)
x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
x
lapply(x, function(elt) elt[,1])
x <- list(a = 1:4, b = rnorm(10), c = rnorm(20, 1), d = rnorm(100))
lapply(x, mean)
sapply(x, mean)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
x <- matrix(rnorm(200), 20, 10)
apply(x, 2, mean)
apply(x, 1, sum)
x
x <- matrix(rnorm(200), 20, 10)
apply(x, 1, quantile, probs = c(0.25, 0.75))
list(rep(1, 4), rep(2, 3), rep(3, 2), rep(4, 1))
mapply(rep, 1:4, 4: 1)
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
f
tapply(x, f, mean)
s <- split(airquality, airquality$Month)
s
s <- split(airquality, airquality$Month)
s
fnx <- function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")])
fnx2 <- function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = T)
lapply(s, fnx)
x <- rnorm(10)
x
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
x <- rnorm(10)
x
f1 <- gl(2, 5)
f2 <- gl(5, 2)
f1
f2
interaction(f1, f2)
split(x, list(f1, f2))
library(datasets)
data(iris)
library(datasets)
data(iris)
library(datasets)
data(iris)
?iris
iris
s <- split(iris, iris$Species); s
s <- lapply(s, mean)
s <- s(s, mean)
s <- split(iris, iris$Species);
s <- s(s, mean)
s <- split(iris, iris$Species);
sapply(s, mean)
s <- split(iris, iris$Species);
lapply(s, mean)
s <- split(iris, iris$Species);
lapply(s, function(x) colMeans(x[, "Sepal.Length"]))
?colMeans
s <- split(iris, iris$Species);
lapply(s, function(x) colMeans(x[, c("Sepal.Length")]))
colMeans(iris)
s <- split(iris, iris$Species);
lapply(s, function(x) mean(x[, "Sepal.Length"]))
s <- split(iris, iris$Species);s
lapply(s, function(x) mean(x[, "Sepal.Length"]))
library(datasets)
data(iris)
s <- split(iris, iris$Species);s
lapply(s, function(x) mean(x[, "Sepal.Length"]))
round(6.588)
lapply(s, function(x) mean(x[, "Sepal.Length"]))["virginica"]
sapply(s, function(x) mean(x[, "Sepal.Length"]))["virginica"]
round(sapply(s, function(x) mean(x[, "Sepal.Length"]))["virginica"])
iris
head(iris)
apply(iris[, 1:4], 2, mean)
colMeans(iris)
head(iris)
apply(iris, 1, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
mtcars
apply(mtcars, 2, mean)
apply(mtcars, 1, mean)
tapply(mtcars$mpg, mtcars$cyl, mean)
mtcars$mpg
mtcars$cyl
mean(mtcars$mpg, mtcars$cyl)
0
sapply(mtcars, cyl, mean)
lapply(mtcars, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$mpg, mtcars$cyl, mean) #YES
with(mtcars, tapply(mpg, cyl, mean))
?with
tapply(mtcars$cyl, mtcars$mpg, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
split(mtcars$mpg, mtcars$cyl)
mtcars$mpg
mtcars$cyl
sapply(split(mtcars$mpg, mtcars$cyl), mean)
with(mtcars, tapply(mpg, cyl, mean)) #YES
tapply(mtcars$mpg, mtcars$cyl, mean) #YES
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
tapply(mtcars$hp, mtcars$cyl, mean)
x <- tapply(mtcars$hp, mtcars$cyl, mean)
x[c(1,3)]
x <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(x[1] - x[3])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(x[3] - x[1])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
abs(x[1] - x[3])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
round(abs(x[3] - x[1]))
abs(x[3] - x[1])
x <- tapply(mtcars$hp, mtcars$cyl, mean)
round(abs(x[3] - x[1]))
debug(ls)
ls
debug(ls)
ls()
debug(ls)
ls()
rm(list = ls*())
rm(list = ls())
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files (x86)\\Java\\jre1.8.0_151') # for 64-bit version
library(xlsx)
Sys.setenv(JAVA_HOME='C:\\Program Files\\Java\\jre1.8.0_151') # for 64-bit version
library(xlsx)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "https://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "http://www.w3schools.com/xml/simple.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(root)
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
rootNode
xmlName(rootNode)
names(rootNode)
rootNode[1]
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[1]
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]][[1]]
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
library(XML)
fileUrl <- "http://www.xmlfiles.com/examples/note.xml"
doc <- xmlTreeParse(fileUrl, useInternal = T)
doc
rootNode <- xmlRoot(doc)
xmlName(rootNode)
names(rootNode)
rootNode[[1]]
rootNode[[1]][[1]]
xmlSApply(rootNode, xmlValue)
xpathSApply(rootNode, "/node", xmlValue)
doc
xpathSApply(rootNode, "/note", xmlValue)
xpathSApply(rootNode, "//note", xmlValue)
xpathSApply(rootNode, "//to", xmlValue)
xmlSApply(rootNode, xmlValue)
xpathSApply(rootNode, "//to", xmlValue)
xpathSApply(rootNode, "//from", xmlValue)
xpathSApply(rootNode, "//to", xmlValue)
xpathSApply(rootNode, "//from", xmlValue)
install.packages(jsonlite)
install.packages("jsonlite")
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/rigalves/repos")
jsonData
names(jsonData)
library(jsonlite)
jsonData <- fromJSON("https://api.github.com/users/rigalves/repos")
class(jsonData)
names(jsonData)
jsonData
names(jsonData$owner)
jsonData$owner
myjson <- toJSON(iris, pretty = T)
myjson
myjson <- toJSON(iris, pretty = T)
myjson
iris2 <- fromJSON(myjson)
head(iris2)
library(data.table)
install.packages("data.table")
library(data.table)
setwd("C:/Users/rigal/Amazon Drive/DBRigo/datasciencecoursera/CleanData")
x[(x$var1 <= 3 & x$var3 > 11),]
x[(x$var1 <= 3 | x$var3 > 15),]
##########################################
set.seed(13435)
x <- data.frame("var1"=sample(1:5), "var2"=sample(6:10), "var3"=sample(11:15))
x
x <- x[sample(1:5),]
x
x$var2[c(1,3)] = NA
x
class(sample(1:5))
x[,1]
x[1]
x[,"var1"]
x[1:2, "var2"]
x[(x$var1 <= 3 & x$var3 > 11),]
x[(x$var1 <= 3 | x$var3 > 15),]
x[which(x$var2 > 8),]
x[x$var2 > 8,]
x[which(x$var2 > 8),]
x[(x$var2 > 8),]
which(x$var2 > 8)
x
x[(x$var2 <= 3 & x$var3 > 11),]
x[which(x$var2 > 8),] #var2 it's different from var1 and 3 'cause of the NAs, needs 'which'
x[which(x$var2 > 8),] #var2 it's different from var1 and 3 'cause of the NAs, needs 'which'
x[(x$var2 > 8),]
which(x$var2 > 8)
x
sort(x$var1)
sort(x$var1, decreasing = T)
sort(x$var2, na.last = T)
?which
which(1:10)
which(T:F)
which(T)
which(c(T,F))
which(c(T,F,T))
x
x[order(x$var1),]
x
x[order(x$var1),]
x[order(x$var1,x$var3),]
install.packages(plyr)
install.packages("plyr")
arrange(x, var1)
library(plyr)
arrange(x, var1)
library(plyr)
arrange(x, var1)
arrange(x, desc(var1))
x$var4 <- rnorm(5)
x
y <- cbind(x,rnorm(5))
y
y
y
y[5]
names(y[5])
names(y[5]) <- "test"
y
names(y[5]) <- c("test")
y
colnames(y[5]) <- c("test")
y
colnames(y)[5] <- c("test")
colnames(y)[5] <- c("test")
y
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
library(curl)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
library (RCurl)
library (RCurl)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
library (RCurl)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "http://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv",method="curl")
restData <- read.csv("./data/restaurants.csv")
library (RCurl)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "http://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv")
restData <- read.csv("./data/restaurants.csv")
ls
ls*
ls()
dir
ls()
dir()
dir(",/data")
dir("data")
library (RCurl)
if(!file.exists("./data")){dir.create("./data")}
fileUrl <- "http://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
download.file(fileUrl,destfile="./data/restaurants.csv")
restData <- read.csv("./data/restaurants.csv")
head(restData,n=3)
tail(restData,n=3)
summary(restData)
?str
str(ls)
str(ls())
str(restData)
quantile(restData$councilDistrict,na.rm=TRUE)
quantile(restData$councilDistrict,probs=c(0.5,0.75,0.9))
restData$councilDistrict
quantile(restData$councilDistrict,probs=c(0.5,0.75,0.9))
quantile(restData$councilDistrict,na.rm=TRUE)
max(restData$councilDistric)
min(restData$councilDistric)
14*0.75
14*0.5
14*0.25
?table
table(restData$zipCode,useNA="ifany")
class(table(restData$zipCode,useNA="ifany"))
?table
restData$zipCode
restData[]
restData[restData$zipCode="21201",]
restData[restData$zipCode=="21201",]
count(restData[restData$zipCode=="21201",])
length(restData[restData$zipCode=="21201",])
restData[restData$zipCode=="21201",]
restData[restData$zipCode=="21201",1]
restData[restData$zipCode=="21201"]
restData[restData$zipCode=="21201",1]
restData[restData$zipCode=="21201",1]
count(restData[restData$zipCode=="21201",1])
length(restData[restData$zipCode=="21201",1])
table(restData$zipCode,useNA="ifany")
table(restData$councilDistrict,restData$zipCode)
sum(is.na(restData$councilDistrict))
any(is.na(restData$councilDistrict))
all(restData$zipCode > 0)
colSums(is.na(restData))
all(colSums(is.na(restData))==0)
colSums(restData)
colSums(restData)
colSums(restData > 10)
colSums(restData)
colSums(restData$zipCode > 10)
colSums(restData$ > 10)
colSums(is.na(restData))
all(colSums(is.na(restData))==0)
table(restData$zipCode == 0)
table(restData$zipCode == 1)
table(restData$zipCode > 1)
table(restData$zipCode == 0)
table(restData$zipCode > 1)
table(restData$zipCode == -1)
table(restData$zipCode > 0)
table(restData$zipCode %in% c("21212"))
table(restData$zipCode %in% c("21212","21213"))
data(UCBAdmissions)
?data
UCBAdmissions
rm(list = ls())
UCBAdmissions
rm(list = ls())
DF = as.data.frame(UCBAdmissions)
summary(DF)
xt <- xtabs(Freq ~ Gender + Admit,data=DF)
xt
DF
class(xt)
warpbreaks$replicate <- rep(1:9, len = 54)
xt = xtabs(breaks ~.,data=warpbreaks)
xt
warpbreaks
ftable(xt)
